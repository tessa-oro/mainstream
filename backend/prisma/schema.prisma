// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user String @id
  hashedPassword String
  score Decimal
  numRatedSongs Int
  followers Follower[]
  following Following[]
  playlist Song[]
  interactions Interactions[]
  similars Json
  recommended String[]
}

model Song {
  id Int @id @default(autoincrement())
  title String
  artist String
  player String
  ratings Int[]
  ratedBy String[]
  avgRating Decimal
  playlistUser User @relation(fields: [userID], references:[user], onDelete: Cascade)
  userID String
}

model Follower {
  id Int @id @default(autoincrement())
  follows User @relation(fields: [followsName], references: [user], onDelete: Cascade)
  followsName String
  name String
  @@unique([followsName, name])
}

model Following {
  id Int @id @default(autoincrement())
  followedBy User @relation(fields: [followedByName], references: [user], onDelete: Cascade)
  followedByName String
  name String
  @@unique([followedByName, name])
}

model SongItem {
  playerID String @id
  interactions Interactions[]
}

model Interactions {
  id Int @id @default(autoincrement())
  user String
  songItem String
  userRef User @relation(fields: [user], references: [user], onDelete: Cascade)
  songRef SongItem @relation(fields: [songItem], references: [playerID], onDelete: Cascade)
  rating Int
}